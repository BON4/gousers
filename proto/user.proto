syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

// Generated according to https://cloud.google.com/apis/design/standard_methods
service UserService {
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/Users"
    };
  }

  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1alpha1/{id=Users/*}"
    };
  }

  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1alpha1/Users"
      body: "User"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1alpha1/{User.id=Users/*}"
      body: "User"
    };
  }

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{id=Users/*}"
    };
  }

  rpc AuthUser(SessionAuthUserRequest) returns (SessionAuthUserResponse) {
    option (google.api.http) = {
      post: "/v1alpha/auth"
    };
  }
}

message User {
    string id = 1;
    string email =2;
    string password = 3;
}

message ListUsersRequest {
  // The parent resource name, for example, "shelves/shelf1"
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListUsersResponse {
  // The field name should match the noun "User" in the method name.
  // There will be a maximum number of items returned based on the page_size field in the request.
  repeated User Users = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
}

message GetUserRequest {
  // The field will contain name of the resource requested.
  string id = 1;
}

message CreateUserRequest {
  // The parent resource name where the User is to be created.
  string parent = 1;

  // The User id to use for this User.
  string User_id = 2;

  // The User resource to create.
  // The field name should match the Noun in the method name.
  User User = 3;
}

message UpdateUserRequest {
  // The User resource which replaces the resource on the server.
  User User = 1;
}

message DeleteUserRequest {
  // The resource name of the User to be deleted.
  string id = 1;
}

message SessionAuthUserRequest {
  User User = 1;
}

message SessionAuthUserResponse {
  //TODO Field Expiers - time to the deleteing the session
  string session = 1;
}
